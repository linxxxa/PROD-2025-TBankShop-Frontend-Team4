import { useState, useEffect } from 'react';
import lentaImage from '../../images/lenta.png';
import perekImage from '../../images/perek.png';
import pyaterochkaImage from '../../images/pyaterochka.png';
import vvImage from '../../images/vv.png'; // –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
import Catalog from '../catalog/Catalog';
import Cart from '../cart/Cart';
import StoreProducts from '../store/StoreProducts';
import CategoryProducts from '../category/CategoryProducts';
import { storesAPI, productsAPI } from '../../services/api';
import './Home.css'


const Home = ({ setShowBackButton, setOnBackClick, isCartVisible, setIsCartVisible }) => {
  const [selectedStore, setSelectedStore] = useState(null);
  const [currentView, setCurrentView] = useState('stores'); // 'stores', 'products', 'category' –∏–ª–∏ 'cart'
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [categoryProducts, setCategoryProducts] = useState([]);
  const [stores, setStores] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const localImages = {
    1: vvImage,
    2: pyaterochkaImage,
    3: perekImage,
    4: lentaImage
  };


  // –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã (–Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å API)
  useEffect(() => {
    const staticStores = [
      {
        id: 1,
        name: "–í–∫—É—Å–í–∏–ª–ª",
        description: "–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è",
        image: localImages[1],
        category: "healthy"
      },
      {
        id: 2,
        name: "–ü—è—Ç–µ—Ä–æ—á–∫–∞", 
        description: "–î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ —É –¥–æ–º–∞",
        image: localImages[2],
        category: "supermarket"
      },
      {
        id: 3,
        name: "–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫",
        description: "–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –∏ –∫–∞—Ñ–µ Select",
        image: localImages[3],
        category: "supermarket"
      },
      {
        id: 4,
        name: "–õ–µ–Ω—Ç–∞",
        description: "–ì–∏–ø–µ—Ä–º–∞—Ä–∫–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–º–∞", 
        image: localImages[4],
        category: "hypermarket"
      }
    ];
    
    setStores(staticStores);
    setLoading(false);
    setError(null);
    console.log('–ú–∞–≥–∞–∑–∏–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ):', staticStores);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω
  const handleStoreClick = (store) => {
    console.log('üè™ –ö–ª–∏–∫ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω:', store);
    setSelectedStore(store);
    setCurrentView('products');
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ header
    setShowBackButton(true);
    setOnBackClick(() => handleBackToStores);
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    window.history.pushState({}, '', `?store=${store.id}`);
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–∞:', store.name);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º
  const handleBackToStores = () => {
    setSelectedStore(null);
    setSelectedCategory(null);
    setCurrentView('stores');
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ header
    setShowBackButton(false);
    setOnBackClick(null);
    // –û–±–Ω–æ–≤–ª—è–µ–º URL
    window.history.pushState({}, '', '/');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
  const handleShowCart = () => {
    setCurrentView('cart');
    setShowBackButton(true);
    setOnBackClick(() => handleBackToStores);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  const handleCategoryClick = async (category) => {
    try {
      setLoading(true);
      setSelectedCategory(category);
      setCurrentView('category');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ header
      setShowBackButton(true);
      setOnBackClick(() => handleBackToStores);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      let products = await productsAPI.getProductsByCategory(category);
      
      // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º
      if (products.length === 0) {
        console.log('–¢–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...');
        const allProducts = await productsAPI.getAllProducts();
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryMap = {
          'dairy': '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã',
          'fruits': '–§—Ä—É–∫—Ç—ã', 
          'bread': '–•–ª–µ–±',
          'meat': '–ú—è—Å–æ',
          'grains': '–ö—Ä—É–ø—ã',
          'frozen': '–ó–∞–º–æ—Ä–æ–∑–∫–∞',
          'vegetables': '–û–≤–æ—â–∏'
        };
        
        const categoryName = categoryMap[category];
        products = allProducts.filter(product => 
          product.categories === categoryName
        );
        
        console.log('–¢–æ–≤–∞—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', products);
      }
      
      setCategoryProducts(products);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL
      window.history.pushState({}, '', `?category=${category}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const storeId = urlParams.get('store');
    if (storeId) {
      const store = stores.find(s => s.id === parseInt(storeId));
      if (store) {
        setSelectedStore(store);
        setCurrentView('products');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ header
        setShowBackButton(true);
        setOnBackClick(() => handleBackToStores);
      }
    }
  }, []);


  return (
    <div className="home-page">
      {/* –ö–∞—Ç–∞–ª–æ–≥ —Å–ª–µ–≤–∞ */}
      <aside className="home-page__sidebar home-page__sidebar--left">
        <Catalog onCategoryClick={handleCategoryClick}/>
      </aside>
      
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="home-page__main">
        {currentView === 'products' && selectedStore ? (
          <StoreProducts 
            storeId={selectedStore.id}
            storeName={selectedStore.name}
          />
        ) : currentView === 'category' && selectedCategory ? (
          <CategoryProducts 
            category={selectedCategory}
            products={categoryProducts}
            loading={loading}
            error={error}
          />
        ) : (
          <div className="main-content">
            <h2 className="stores-title">
              –í—ã–±–µ—Ä–∏ –ª—é–±–∏–º—ã–π –º–∞–≥–∞–∑–∏–Ω
            </h2>
            
            {loading && (
              <div className="loading-message">
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤...</p>
              </div>
            )}
            
            {error && (
              <div className="error-message">
                <p>{error}</p>
                <p>–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
              </div>
            )}
            
            <div className="stores-grid">
              {stores.map(store => (
                <div key={store.id} className="store-card">
                  <button 
                    className="store-card__image-container store-card__button"
                    onClick={() => handleStoreClick(store)}
                  >
                    <img 
                      src={store.image} 
                      alt={store.name}
                      className="store-card__image"
                      onError={(e) => {
                        // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –µ—Å–ª–∏ PNG –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                        e.target.style.backgroundColor = '#f5f5f5';
                        e.target.style.display = 'flex';
                        e.target.style.alignItems = 'center';
                        e.target.style.justifyContent = 'center';
                        e.target.style.color = '#666';
                        e.target.style.fontFamily = 'Arial';
                        e.target.style.fontSize = '16px';
                        e.target.style.fontWeight = 'bold';
                        e.target.innerHTML = store.name;
                        e.target.src = '';
                      }}
                    />
                  </button>
                  <div className="store-card__content">
                    <h3 className="store-card__name">{store.name}</h3>
                    <p className="store-card__description">{store.description}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </main>
      
      {/* –ü—Ä–∞–≤–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
      <aside className="home-page__sidebar home-page__sidebar--right">
        <Cart isVisible={isCartVisible} onClose={() => setIsCartVisible(false)}/>
      </aside>
    </div>
  );
};

export default Home;