import { useState, useEffect } from 'react';
import './StoreProducts.css';
import ProductModal from '../product/ProductModal';
import { storesAPI, productsAPI } from '../../services/api';

const StoreProducts = ({ storeId, storeName }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [showOtherCategories, setShowOtherCategories] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [isProductModalOpen, setIsProductModalOpen] = useState(false);

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å –±—ç–∫–∞)

  const categories = [
    { id: 'all', name: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã' },
    { id: 'dairy', name: '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã' },
    { id: 'fruits', name: '–§—Ä—É–∫—Ç—ã' },
    { id: 'bread', name: '–•–ª–µ–±' },
    { id: 'meat', name: '–ú—è—Å–æ' }
  ];

  useEffect(() => {
    const loadProducts = async () => {
      try {
        setLoading(true);
        const productsData = await storesAPI.getStoreProducts(storeId);
        
        // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∞–≥–∞–∑–∏–Ω—É
        if (productsData.length === 0) {
          console.log('–¢–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞ –ø—É—Å—Ç—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...');
          try {
            const allProducts = await productsAPI.getAllProducts();
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
            const storeNames = {
              1: '–í–∫—É—Å–í–∏–ª–ª',
              2: '–ü—è—Ç–µ—Ä–æ—á–∫–∞', 
              3: '–ü–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫',
              4: '–õ–µ–Ω—Ç–∞'
            };
            
            const storeName = storeNames[storeId];
            const filteredProducts = allProducts.filter(product => 
              product.which_store === storeName
            );
            
            setProducts(filteredProducts);
            console.log('–¢–æ–≤–∞—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã –ø–æ –º–∞–≥–∞–∑–∏–Ω—É:', filteredProducts);
          } catch (fallbackError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:', fallbackError);
            setProducts([]);
          }
        } else {
          setProducts(productsData);
          console.log('–¢–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API:', productsData);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞.');
        setProducts([]);
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [storeId]);


  const filteredProducts = selectedCategory === 'all' 
    ? products 
    : products.filter(product => product.category === selectedCategory);

  const handleAddToCart = (product, e) => {
    if (e) {
      e.stopPropagation(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è
    }
    console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:', product);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
    const currentCart = JSON.parse(localStorage.getItem('cart') || '[]');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    const existingItem = currentCart.find(item => item.id === product.id);
    
    if (existingItem) {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const updatedCart = currentCart.map(item =>
        item.id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      );
      localStorage.setItem('cart', JSON.stringify(updatedCart));
    } else {
      // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
      const newItem = {
        ...product,
        quantity: 1,
        storeName: storeName
      };
      const updatedCart = [...currentCart, newItem];
      localStorage.setItem('cart', JSON.stringify(updatedCart));
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã
    window.dispatchEvent(new Event('cartUpdated'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  };

  const handleProductClick = (product) => {
    setSelectedProduct(product);
    setIsProductModalOpen(true);
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –¥–ª—è —Ç–æ–≤–∞—Ä–∞
    window.history.pushState({}, '', `?store=${storeId}&product=${product.id}`);
    console.log('–û—Ç–∫—Ä—ã—Ç —Ç–æ–≤–∞—Ä:', product);
  };

  const handleCloseProductModal = () => {
    setIsProductModalOpen(false);
    setSelectedProduct(null);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ –∫ –º–∞–≥–∞–∑–∏–Ω—É
    window.history.pushState({}, '', `?store=${storeId}`);
  };

  const handleCategoryClick = (categoryId) => {
    setSelectedCategory(categoryId);
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑ "–î—Ä—É–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", –¥–µ–ª–∞–µ–º –µ—ë –ø–µ—Ä–≤–æ–π
    if (categoryId !== 'all') {
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      const updatedCategories = [
        categories.find(cat => cat.id === categoryId),
        ...categories.filter(cat => cat.id !== categoryId && cat.id !== 'all')
      ].filter(Boolean);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      setSelectedCategory(categoryId);
    }
  };

  const handleShowOtherCategories = () => {
    setShowOtherCategories(!showOtherCategories);
  };

  if (loading) {
    return (
      <div className="store-products">
        <div className="loading">
          <div className="loading__spinner"></div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="store-products">
      <h1 className="store-products__title">{storeName}</h1>

      <div className="store-products__filters">
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä–≤–æ–π */}
        {selectedCategory === 'all' ? (
          <button
            className={`filter-button ${selectedCategory === 'all' ? 'active' : ''}`}
            onClick={() => handleCategoryClick('all')}
          >
            <span className="filter-name">–í—Å–µ —Ç–æ–≤–∞—Ä—ã</span>
          </button>
        ) : (
          <button
            className={`filter-button ${selectedCategory === selectedCategory ? 'active' : ''}`}
            onClick={() => handleCategoryClick(selectedCategory)}
          >
            <span className="filter-name">{categories.find(cat => cat.id === selectedCategory)?.name}</span>
          </button>
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã" */}
        <button
          className="filter-button filter-button--others"
          onClick={handleShowOtherCategories}
        >
          <span className="filter-name">–î—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã</span>
          <span className="filter-arrow">{showOtherCategories ? '‚ñº' : '‚ñ∂'}</span>
        </button>
        
        {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏) */}
        {showOtherCategories && (
          <div className="other-categories">
            {categories.filter(cat => cat.id !== selectedCategory).map(category => (
              <button
                key={category.id}
                className={`filter-button filter-button--other ${selectedCategory === category.id ? 'active' : ''}`}
                onClick={() => handleCategoryClick(category.id)}
              >
                <span className="filter-name">{category.name}</span>
              </button>
            ))}
          </div>
        )}
      </div>

      <div className="store-products__grid">
        {filteredProducts.length === 0 ? (
          <div className="no-products">
            <div className="no-products__icon">üì¶</div>
            <h3 className="no-products__title">–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤</h3>
            <p className="no-products__message">
              –í —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            </p>
          </div>
        ) : (
          filteredProducts.map(product => (
          <div 
            key={product.id} 
            className="product-card"
            onClick={() => handleProductClick(product)}
          >
            <div className="product-card__image">
              <img src={product.image} alt={product.name} />
            </div>
            <div className="product-card__content">
              <h3 className="product-card__name">{product.name}</h3>
              <p className="product-card__price">{product.price} ‚ÇΩ</p>
              <button 
                className="product-card__button"
                onClick={(e) => handleAddToCart(product, e)}
              >
                –í –∫–æ—Ä–∑–∏–Ω—É
              </button>
            </div>
          </div>
        ))
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–≤–∞—Ä–∞ */}
      <ProductModal
        isOpen={isProductModalOpen}
        onClose={handleCloseProductModal}
        product={selectedProduct}
        storeName={storeName}
        onAddToCart={handleAddToCart}
      />
    </div>
  );
};

export default StoreProducts;
